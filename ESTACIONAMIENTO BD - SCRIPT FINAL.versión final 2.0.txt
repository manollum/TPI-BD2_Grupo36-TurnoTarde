--1) PARTE LEO

--CREACION DE LA BASE DE DATOS

CREATE DATABASE EstacionamientoDB
GO

USE EstacionamientoDB
GO


CREATE TABLE Cliente (
    IDCliente INT PRIMARY KEY IDENTITY(1,1), -- Se autoincrementa desde 1 de a 1
    Nombre VARCHAR(30) NOT NULL,
    Apellido VARCHAR(30) NOT NULL ,
    DNI VARCHAR(10) NOT NULL UNIQUE,
    Telefono VARCHAR(15),
    Email VARCHAR(50)
)
GO

CREATE TABLE Tarifa (
    IDTarifa INT PRIMARY KEY IDENTITY(1,1),
    TipoVehiculo VARCHAR(20) NOT NULL,
    PrecioHora MONEY NOT NULL
)
GO


CREATE TABLE Vehiculo (
    IDVehiculo INT PRIMARY KEY IDENTITY(1,1), -- ID único y autoincremental
    IDCliente INT NOT NULL,                   -- Relación con Cliente
    IDTarifa INT NOT NULL,                    -- Relación con Tarifa
    Patente VARCHAR(10) NOT NULL UNIQUE,
    Marca VARCHAR(20) NOT NULL,
    Modelo VARCHAR(30) NOT NULL,
    FOREIGN KEY (IDCliente) REFERENCES Cliente(IDCliente),
    FOREIGN KEY (IDTarifa) REFERENCES Tarifa(IDTarifa)
)
GO


CREATE TABLE Espacio (
    IDEspacio INT PRIMARY KEY IDENTITY(1,1),
    Numero INT NOT NULL,
    Estado BIT NOT NULL CHECK (Estado IN (0, 1)) -- 1 = Libre, 0 = Ocupado
)
GO

CREATE TABLE IngresoSalida (
    IDRegistro INT PRIMARY KEY IDENTITY(1,1),
    IDVehiculo INT NOT NULL,
    IDEspacio INT NOT NULL,
    FechaHoraIngreso DATETIME NOT NULL,
    FechaHoraSalida DATETIME NULL,
    Importe MONEY NULL, -- Monto final calculado por permanencia
    FOREIGN KEY (IDVehiculo) REFERENCES Vehiculo(IDVehiculo),
    FOREIGN KEY (IDEspacio) REFERENCES Espacio(IDEspacio)
)
GO

-- Ahora insertamos datos de prueba:

-- Clientes
INSERT INTO Cliente (Nombre, Apellido, DNI, Telefono, Email) VALUES
('Juan', 'Pérez', '12345678', '1144556677', 'juanp@gmail.com'),
('Laura', 'Gómez', '87654321', '1122334455', 'laurag@gmail.com'),
('Ramón', 'Benitez', '33333333', '1122159080', 'benitez@gmail.com'),
('Carlos', 'Carlson', '92111222', '1138608712', 'carlitos@gmail.com'),
('Leonardo', 'Frustelli', '38822867', '1168632660', 'leonardo.frustelli@gmail.com')
GO

-- Tarifas
INSERT INTO Tarifa (TipoVehiculo, PrecioHora) VALUES
('Auto', 100.00),
('Moto', 50.00)
GO

-- Vehículos
INSERT INTO Vehiculo (IDCliente, IDTarifa, Patente, Marca, Modelo) VALUES
(1, 1, 'ABC123', 'Toyota', 'Corolla'),
(2, 1, 'YJU459', 'Ford', 'Fiesta'),
(3, 2, 'AAA123', 'Yamaha', 'R1'),
(4, 1, 'XYZ789', 'Volkswagen', 'Trend'),
(5, 1, 'GGO199', 'Volkswagen', 'Passat FSI')
GO

-- Espacios
INSERT INTO Espacio (Numero, Estado) VALUES
(1, 1),
(2, 1),
(3, 1),
(4, 1),
(5, 1),
(6, 1),
(7, 1),
(8, 1),
(9, 1),
(10, 1)
GO

-- Ingresos (opcional al principio)
INSERT INTO IngresoSalida (IDVehiculo, IDEspacio, FechaHoraIngreso, FechaHoraSalida, Importe) VALUES
(1, 1, '20250607 08:00:00', '20250607 10:00:00', 200.00),
(2, 2, '20250607 09:00:00', '20250607 11:00:00', 200.00),
(3, 3, '20250607 10:00:00', '20250607 11:30:00', 75.00),
(4, 4, '20250607 14:00:00', '20250607 17:00:00', 300.00),
(5, 1, '20250607 18:30:00', '20250607 20:30:00', 200.00)
GO

-- VISTAS

-- CREACION DE VISTA PARA MOSTRAR ESPACIOS LIBRES

CREATE VIEW VW_MOSTRAR_ESPACIOS_LIBRES
AS
SELECT Numero as 'Nº Espacio Libre' 
FROM Espacio 
WHERE Estado = 1
GO

-- CREACION DE VISTA PARA MOSTRAR INGRESOS Y SALIDAS DETALLADAS DE VEHICULOS

CREATE VIEW VW_MOSTRAR_HISTORIAL_CLIENTE
AS
SELECT	TOP 1000
		I.IDRegistro, 		
		C.DNI,
		(C.Nombre + ' ' + C.Apellido) AS Cliente,		
		(V.Marca + ' ' + V.Modelo) AS 'Vehículo',
		V.Patente, 
		FORMAT(I.FechaHoraIngreso, 'yy-MM-dd HH:mm') AS 'Ingreso',
		FORMAT(I.FechaHoraSalida, 'yy-MM-dd HH:mm') AS 'Salida',
		FORMAT(I.Importe, 'N2') AS 'Importe'
FROM IngresoSalida I
INNER JOIN Vehiculo V ON V.IDVehiculo = I.IDVehiculo
INNER JOIN Cliente C ON C.IDCliente = V.IDCliente
ORDER BY I.FechaHoraIngreso DESC
GO

-- CREACION DE VISTA PARA MOSTRAR RECAUDACION DE LOS DIAS

CREATE VIEW VW_MOSTRAR_RECAUDACION_POR_DIA
AS
SELECT	TOP 1000
		CAST(FechaHoraIngreso AS DATE) AS 'Fecha',
		COUNT(FechaHoraIngreso) AS 'Cantidad ingresos',
		FORMAT(SUM(Importe), 'N2') AS 'Recaudación'		
FROM IngresoSalida
GROUP BY CAST(FechaHoraIngreso AS DATE) 
ORDER BY [Fecha] DESC
GO

---------------------------------------------------------------------------------

--2)PARTE MANU


-- PROCEDIMIENTO PARA REGISTRAR INGRESO DE UN VEHICULO
CREATE PROCEDURE SP_REGISTRAR_INGRESO(
    @Patente VARCHAR(10)
)
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION

        DECLARE @IDVehiculo INT
        DECLARE @IDEspacioLibre INT

        -- Buscar el ID del vehículo por patente
        SELECT @IDVehiculo = IDVehiculo
        FROM Vehiculo
        WHERE Patente = @Patente

        -- Validar que exista
        IF @IDVehiculo IS NULL
        BEGIN
            RAISERROR('Patente inexistente en sistema.', 16, 1);
            RETURN;
        END

        -- Buscar un espacio libre
        SELECT TOP 1 @IDEspacioLibre = IDEspacio
        FROM Espacio
        WHERE Estado = 1

        -- Validar que haya un espacio libre
        IF @IDEspacioLibre IS NULL
        BEGIN
            RAISERROR('No hay espacios libres disponibles.', 16, 1);
            RETURN;
        END

        -- Validar que ese espacio no esté ya ocupado por otro vehículo en este momento
        IF EXISTS (
            SELECT 1 FROM IngresoSalida
            WHERE IDEspacio = @IDEspacioLibre
            AND FechaHoraSalida IS NULL
        )
        BEGIN
            RAISERROR('El espacio está ocupado actualmente.', 16, 1);
            RETURN;
        END

        -- Registrar el ingreso
        INSERT INTO IngresoSalida (IDVehiculo, IDEspacio, FechaHoraIngreso)
        VALUES (@IDVehiculo, @IDEspacioLibre, GETDATE())

        COMMIT TRANSACTION
        PRINT 'Registro exitoso'

    END TRY
    BEGIN CATCH
        DECLARE @ERROR VARCHAR(250) = ERROR_MESSAGE()

        IF @ERROR LIKE '%Patente%'
            PRINT 'Patente inexistente en la base de datos. Debe registrar su vehículo primero.'
        ELSE IF @ERROR LIKE '%espacio%'
            PRINT 'No hay espacios disponibles en este momento. Disculpe el inconveniente.'
        ELSE IF @ERROR LIKE '%ocupado%'
            PRINT 'El espacio está ocupado actualmente. Intente con otro en unos minutos.'
        ELSE
            RAISERROR('No se pudo registrar el ingreso. Vuelva a intentarlo más tarde.', 16, 1)

        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION
    END CATCH
END
GO


-- PROCEDIMIENTO PARA CARGAR EL IMPORTE DE LA ESTADIA DEL VEHICULO

CREATE PROCEDURE SP_CARGAR_IMPORTE(								
		@IDRegistro INT
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
		DECLARE @TiempoEnMinutos INT
		DECLARE @Importe MONEY
		DECLARE @PrecioHora MONEY
		

		SELECT @TiempoEnMinutos = DATEDIFF(MINUTE, FechaHoraIngreso, FechaHoraSalida)
		FROM IngresoSalida
		WHERE IDRegistro = @IDRegistro

		SELECT @PrecioHora = T.PrecioHora
		FROM Tarifa T
		INNER JOIN Vehiculo V ON V.IDTarifa = T.IDTarifa
		INNER JOIN IngresoSalida I ON I.IDVehiculo = V.IDVehiculo
		WHERE I.IDRegistro = @IDRegistro 

		SET @Importe =	(@TiempoEnMinutos / 60) * @PrecioHora  +
						(@TiempoEnMinutos % 60) * (@PrecioHora / 60)		

		UPDATE IngresoSalida SET Importe = @Importe
		WHERE IDRegistro = @IDRegistro
		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
	IF @@TRANCOUNT > 0
	BEGIN
	ROLLBACK TRANSACTION
	RAISERROR ('No se pudo agregar el importe', 16, 1)
	END
	END CATCH
END
GO

-- PROCEDIMIENTO PARA REGISTRAR SALIDA DE UN VEHICULO

CREATE PROCEDURE SP_REGISTRAR_SALIDA(
    @Patente VARCHAR(10)
)
AS
BEGIN
    BEGIN TRY    
        BEGIN TRANSACTION

        DECLARE @IDRegistro INT
        DECLARE @IDVehiculo INT        

        -- Buscar el vehículo por patente
        SELECT @IDVehiculo = IDVehiculo
        FROM Vehiculo 
        WHERE Patente = @Patente

        -- Validar que exista
        IF @IDVehiculo IS NULL
        BEGIN
            RAISERROR('Patente inexistente en sistema.', 16, 1);
            RETURN;
        END

        -- Buscar el último ingreso sin salida
        SELECT TOP 1 @IDRegistro = IDRegistro
        FROM IngresoSalida
        WHERE IDVehiculo = @IDVehiculo
        AND FechaHoraSalida IS NULL
        ORDER BY FechaHoraIngreso DESC

        -- Validar que haya una salida pendiente
        IF @IDRegistro IS NULL
        BEGIN
            RAISERROR('No existen salidas por registrar.', 16, 1);
            RETURN;
        END

        -- Registrar hora de salida
        UPDATE IngresoSalida
        SET FechaHoraSalida = GETDATE()
        WHERE IDRegistro = @IDRegistro

        -- Calcular e insertar el importe
        EXEC SP_CARGAR_IMPORTE @IDRegistro 

        COMMIT TRANSACTION
        PRINT 'Que tenga un excelente día. ¡Hasta luego!'
    
    END TRY
    BEGIN CATCH
        DECLARE @ERROR VARCHAR(250) = ERROR_MESSAGE()

        IF @ERROR LIKE '%Patente%'
            PRINT 'Patente inexistente en la base de datos. Debe registrar su vehículo primero.'
        ELSE IF @ERROR LIKE '%salida%'
            PRINT 'No existen salidas por registrar.'
        ELSE 
            RAISERROR('No se pudo registrar la salida. Intente nuevamente.', 16, 1)

        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION
    END CATCH
END
GO


--------------------------------------------------------------------------------------------------------

--3)PARTE GERMAN 

-- TRIGGERS

--CREACION DE TRIGGER PARA MARCAR ESPACIO COMO OCUPADO 

CREATE TRIGGER TR_OcuparEspacio
ON IngresoSalida
AFTER INSERT
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION

        DECLARE @IDEspacio INT

        -- Obtener el espacio asignado en el nuevo ingreso
        SELECT @IDEspacio = IDEspacio FROM INSERTED

        -- Marcar el espacio como ocupado
        UPDATE Espacio
        SET Estado = 0
        WHERE IDEspacio = @IDEspacio

        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
        ROLLBACK TRANSACTION
        RAISERROR('Error en TR_OcuparEspacio. Operación fallida.', 16, 1)
		END
    END CATCH
END
GO

-- CREACION DE TRIGGER PARA LIBERAR EL ESPACIO QUE DEJO EL VEHICULO RETIRADO

CREATE TRIGGER TR_LiberarEspacio
ON IngresoSalida
AFTER UPDATE
AS
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION
	
        DECLARE @IDEspacio INT

        -- Si se actualizó con una fecha de salida, liberar el espacio
        SELECT @IDEspacio = IDEspacio
        FROM INSERTED
        WHERE FechaHoraSalida IS NOT NULL

        IF @IDEspacio IS NOT NULL
        BEGIN
            UPDATE Espacio
            SET Estado = 1
            WHERE IDEspacio = @IDEspacio;
        END

        COMMIT TRANSACTION
    END TRY
    BEGIN CATCH
		IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION
        RAISERROR('Error en TR_LiberarEspacio. Operación fallida.', 16, 1);
    END CATCH
END
GO